{"version":3,"sources":["components/Box.js","components/Board.js","logic/calculateWinner.js","logic/computerLogic.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","index","xO","onClick","classes","data-testid","className","Board","boxList","map","box","i","key","calculateWinner","winConditions","length","box1","box2","box3","calculateAIMove","AISymbol","playerSymbol","bestSpots","App","useState","Array","fill","setBoxList","isXTurn","setIsXTurn","steps","setSteps","isGameStarted","setIsGameStarted","setPlayerSymbol","mode","setMode","winner","buttonToClick","handleClick","newBoxList","handleModeChange","e","target","id","handleSymbolChange","symbol","style","display","class","onChange","type","name","checked","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6eb6b2d.chunk.js","sourcesContent":["// Imports\r\nimport React from 'react'\r\n\r\n// Box component for individual boxes\r\nfunction Box(props){\r\n    // xO is the text value and onClick is the handler\r\n    const { index, xO, onClick } = props\r\n\r\n    // Class to be applied on basis of X or O\r\n    const classes = xO !== \"-\" ? `box box-${index} ${xO}` : `box box-${index}`\r\n\r\n    // Just a plain div with a onClick event\r\n    return (\r\n        <button data-testid={index} className={classes} onClick={onClick}>\r\n            {xO}\r\n        </button>\r\n    )\r\n}\r\n\r\n// Exporting the created component\r\nexport default Box","// Imports\r\nimport React from 'react'\r\nimport Box from './Box'\r\n\r\n// Board component to hold all the boxes\r\nfunction Board(props) {\r\n    // boxList is an array of all boxes and onClick is the handler\r\n    const { boxList, onClick } = props\r\n\r\n    // Add all the boxes with an index to keep track of the box that was click\r\n    return (\r\n        <div className=\"board\">\r\n            {\r\n                // Map the boxList prop to set the corresponding values in each box\r\n                boxList.map((box, i) => {\r\n                    return (\r\n                        <Box key={i} index={i} xO={box} onClick={() => {\r\n                            onClick(i)\r\n                        }} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n// Export the created component\r\nexport default Board","function calculateWinner(boxList) {\r\n    // All possible continous three boxes are the win conditions\r\n    const winConditions = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n\r\n    // Iterate over every array element and check if the the boxes contain the same symbol in them\r\n    // if so then return the symbol if not then return null\r\n    for (let i = 0; i < winConditions.length; i++) {\r\n        const [box1,box2,box3] = winConditions[i]\r\n        if (boxList[box1] !== \"-\" && boxList[box1] === boxList[box2] && boxList[box1] === boxList[box3]){\r\n            return boxList[box1]\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n// Export the function which we can use in the App component\r\nexport default calculateWinner","function calculateAIMove(boxList, AISymbol, playerSymbol) {\r\n    // All possible continous three boxes are the win conditions\r\n    const winConditions = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n    //Best spots to place a symbol best to worst order\r\n    const bestSpots = [4,0,2,6,8,1,3,5,7]\r\n    // Check if any winning combos are available\r\n    // If available return the missing spot\r\n    // Iterate over every array element and check if the the boxes contain a 2 pair\r\n    // If found check the third element if blank return the element\r\n    for (let i = 0; i < winConditions.length; i++) {\r\n        const [box1,box2,box3] = winConditions[i]\r\n        if (boxList[box1] === AISymbol && (boxList[box2] === AISymbol || boxList[box3] === AISymbol) && (boxList[box2] === '-' || boxList[box3] === '-')){\r\n            return boxList[box2] === AISymbol ? box3 : box2\r\n        }\r\n        if (boxList[box2] === AISymbol && (boxList[box1] === AISymbol || boxList[box3] === AISymbol) && (boxList[box1] === '-' || boxList[box3] === '-')){\r\n            return boxList[box1] === AISymbol ? box3 : box1\r\n        }\r\n        if (boxList[box3] === AISymbol && (boxList[box2] === AISymbol || boxList[box1] === AISymbol) && (boxList[box2] === '-' || boxList[box1] === '-')){\r\n            return boxList[box1] === AISymbol ? box2 : box1\r\n        }\r\n    }\r\n    // Check for players winning moves\r\n    // If available return the missing spot\r\n    for (let i = 0; i < winConditions.length; i++) {\r\n        const [box1,box2,box3] = winConditions[i]\r\n        if (boxList[box1] === playerSymbol && (boxList[box2] === playerSymbol || boxList[box3] === playerSymbol) && (boxList[box2] === '-' || boxList[box3] === '-')){\r\n            return boxList[box2] === playerSymbol ? box3 : box2\r\n        }\r\n        if (boxList[box2] === playerSymbol && (boxList[box1] === playerSymbol || boxList[box3] === playerSymbol) && (boxList[box1] === '-' || boxList[box3] === '-')){\r\n            return boxList[box1] === playerSymbol ? box3 : box1\r\n        }\r\n        if (boxList[box3] === playerSymbol && (boxList[box2] === playerSymbol || boxList[box1] === playerSymbol) && (boxList[box2] === '-' || boxList[box1] === '-')){\r\n            return boxList[box1] === playerSymbol ? box2 : box1\r\n        }\r\n    }\r\n    // Check for the best available spot to put symbol\r\n    // return the available spot\r\n    for (let i = 0; i < bestSpots.length; i++) {\r\n        if (boxList[bestSpots[i]] === \"-\") return bestSpots[i]\r\n    }\r\n}\r\n\r\n// Export the function created\r\nexport default calculateAIMove","// Imports\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport Board from './components/Board'\r\nimport calculateWinner from './logic/calculateWinner'\r\nimport calculateAIMove from './logic/computerLogic'\r\n\r\n// Main component to hold the board and logic for win and board changes\r\nfunction App() {\r\n  // useState Hooks\r\n  const [boxList, setBoxList] = useState(Array(9).fill(\"-\"))\r\n  const [isXTurn, setIsXTurn] = useState(true)\r\n  const [steps, setSteps] = useState(0)\r\n  const [isGameStarted, setIsGameStarted] = useState(false)\r\n\r\n  // states for singleplayer mode\r\n  const [playerSymbol, setPlayerSymbol] = useState(\"X\")\r\n  const [mode, setMode] = useState(\"AI\")\r\n\r\n  // Winner keeps track of winner and xO keeps track of the what to put\r\n  const winner = calculateWinner(boxList);\r\n  let xO = isXTurn ? \"X\" : \"O\"\r\n\r\n  // Keep track of AI's turn\r\n  if (mode === \"AI\" && isGameStarted) {\r\n    let isAITurn = xO === playerSymbol || winner || steps === 9 ? false : true\r\n    // Get the best possible option for AI to play the turn\r\n    const buttonToClick = isAITurn ? calculateAIMove(boxList, xO, playerSymbol) : null\r\n    // If avaialable spot then call the handleclick to simulate a click on the button\r\n    if (buttonToClick !== null) handleClick(buttonToClick)\r\n  }\r\n\r\n  // Handle the button click from the box component and the AI handler\r\n  function handleClick(i) {\r\n    // If we have a winner or if the box is occupied then return\r\n    if (winner || boxList[i] !== \"-\")\r\n      return\r\n    // Add the current xO to the corresponding index that was clicked\r\n    const newBoxList = boxList.map((box, index) => {\r\n      if (index === i) {\r\n        return xO\r\n      }\r\n      return box\r\n    })\r\n    // Set the new boxList and change the turn\r\n    setBoxList(newBoxList)\r\n    setIsXTurn(!isXTurn)\r\n    setSteps(steps + 1)\r\n  }\r\n\r\n  // Reset the state to the start of the game\r\n  function handleReset() {\r\n    setIsGameStarted(false)\r\n    setBoxList(Array(9).fill(\"-\"))\r\n    // Last game's winner moves first\r\n    setIsXTurn(playerSymbol === \"X\" ? true : false)\r\n    setSteps(0)\r\n  }\r\n\r\n  // Handle the radio button change for mode and set the same\r\n  function handleModeChange(e) {\r\n    setMode(e.target.id)\r\n  }\r\n\r\n  // Handle the radio button change for symbol and set the same\r\n  function handleSymbolChange(e) {\r\n    const symbol = e.target.id\r\n    setPlayerSymbol(symbol)\r\n    setIsXTurn(symbol === \"X\" ? true : false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Tic-Tac-Toe</h1>\r\n      {/* Select Mode and set the mode on basis of change */}\r\n      <div style={{ display: !isGameStarted ? \"block\" : \"none\" }}>\r\n        <h2>Select Mode</h2>\r\n        <input data-testid=\"ai-radio\" class=\"hidden\" onChange={handleModeChange} type=\"radio\" id=\"AI\" name=\"mode\" checked={mode === \"AI\" ? true : false} />\r\n        <label htmlFor=\"AI\" class=\"radio-label\">AI</label>\r\n        <input data-testid=\"pvp-radio\" class=\"hidden\" onChange={handleModeChange} type=\"radio\" id=\"PVP\" name=\"mode\" />\r\n        <label htmlFor=\"PVP\" class=\"radio-label\">PVP</label>\r\n      </div>\r\n      {/* Select player symbol and set the mode on basis of change */}\r\n      <div data-testid=\"symbol\" style={{ display: mode === \"AI\" && !isGameStarted ? \"block\" : \"none\" }}>\r\n        <h2>Select Symbol</h2>\r\n        <input data-testid=\"x-radio\" class=\"hidden\" onChange={handleSymbolChange} type=\"radio\" id=\"X\" name=\"symbol\" checked={playerSymbol === \"X\" ? true : false} />\r\n        <label htmlFor=\"X\" class=\"radio-label\">X</label>\r\n        <input data-testid=\"o-radio\" class=\"hidden\" onChange={handleSymbolChange} type=\"radio\" id=\"O\" name=\"symbol\" />\r\n        <label htmlFor=\"O\" class=\"radio-label\">O</label>\r\n      </div>\r\n      <button data-testid=\"start\" class=\"button start\" onClick={() => {\r\n        setIsGameStarted(true)\r\n      }} style={{ display: !isGameStarted ? \"inline-block\" : \"none\" }}>Start Game!</button>\r\n      <div style={{ display: isGameStarted ? \"block\" : \"none\" }}>\r\n        <h2>Board</h2>\r\n        <Board boxList={boxList} onClick={handleClick} />\r\n        {/* On basis of winner or turn display appropriate message */}\r\n        <h2 data-testid=\"playerStatus\">{winner ? `Winner Is ${winner}` : steps === 9 ? \"Game is a draw!\" : `${xO}'s Turn`}</h2>\r\n        {/* Reset the state again after the game is completed */}\r\n        <button data-testid=\"reset\" class=\"button reset\" onClick={handleReset} style={{ display: winner || steps === 9 ? \"inline-block\" : \"none\" }}>Reset!</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}